name: Python Application CI/CD
on:
  push:
    branches:
      - main
  workflow_dispatch: null
  pull_request:
    branches:
      - main
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: gowthamsure/pythonapp
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #permissions:
      #id-token: write   # This is required for requesting the JWT
      #contents: read    # This is required for actions/checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} .
          docker tag $DOCKER_IMAGE:${{ github.sha }} $DOCKER_IMAGE:latest
      - name: Push Docker image
        run: |
          docker push $DOCKER_IMAGE:${{ github.sha }}
          docker push $DOCKER_IMAGE:latest
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=hackathon-proj -Dsonar.host.url=${{ env.SONAR_HOST_URL}} -Dsonar.login=${{ env.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
      - name: Print SonarQube Logs
        run: >
          ls -al .scannerwork
          cat .scannerwork/report-task.txt || echo "report-task.txt not found"
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      #- name: configure aws credentials
        #uses: aws-actions/configure-aws-credentials@v1
        #with:
          #role-to-assume: arn:aws:iam::891376951153:role/github-oidc-myrole
          #role-session-name: samplerolesession
          #aws-region: ap-south-1
 
      #- name: Install kubectl
        #uses: azure/setup-kubectl@v2.0
        #with:
           #version: 'v1.24.0' # default is latest stable
        #id: install
      #- name: Update kube config
       # run: aws eks update-kubeconfig --region ap-south-1 --name hackathon-k8s
      #- name: Deploy to EKS
       # run: |
        #  kubectl apply -f deployment.yaml
         # kubectl apply -f service.yaml
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      # Step 4: Update kubeconfig to access EKS cluster
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name hackathon-main-k8s --region ap-south-1
      - run:
         kubectl apply -f deployment.yaml
